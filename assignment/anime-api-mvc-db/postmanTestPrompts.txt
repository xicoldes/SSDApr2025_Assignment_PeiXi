// üîê AUTH ROUTES
POST /register    - Create new user account
POST /login       - Authenticate user

// üë§ USER ROUTES  
GET    /users          - Get all users (admin only)
GET    /users/:id      - Get user profile
PUT    /users/:id      - Update profile
DELETE /users/:id      - Delete user (admin only)

// üé¨ ANIME ROUTES
GET    /anime          - List all anime (with filters/pagination)
GET    /anime/:id      - Get specific anime
POST   /anime          - Create anime (admin only)
PUT    /anime/:id      - Update anime (admin only)
DELETE /anime/:id      - Delete anime (admin only)

// üí¨ FORUM ROUTES
POST   /threads           - Create discussion thread
GET    /threads/:anime_id - Get threads for anime
PUT    /threads/:id       - Update thread
DELETE /threads/:id       - Delete thread (admin only)

POST   /comments            - Add comment to thread
GET    /comments/:thread_id - Get thread comments
PUT    /comments/:id/upvote - Upvote comment
DELETE /comments/:id        - Delete comment

// üìù WATCHLIST ROUTES
POST   /watchlist            - Add anime to watchlist
GET    /watchlist/:user_id   - Get user's watchlist
PUT    /watchlist/:anime_id  - Update watchlist entry
DELETE /watchlist/:anime_id  - Remove from watchlist
----------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
üîë Authentication Setup

1) Register a new user
----------------------
Method: POST
URL: http://localhost:3000/register

Auth Required: No

Body (JSON):
{
  "username": "testuser",
  "email": "test@example.com",
  "password": "password123"
}

Expected Response (201):
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 4,
    "username": "testuser",
    "role": "user",
    "email": "test@example.com"
  }
}
------------------------------------------------------------------------------------------------
2) User Authentication
-------------------------------------
Method: POST
URL: http://localhost:3000/login

Auth Required: No

Body (JSON):
{
  "username": "admin",
  "password": "admin123"
}

Expected Response (200):
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 1,
    "username": "admin",
    "role": "admin",
    "email": "admin@aniconnect.com",
    "profile_pic": null
  }
}

------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
üë§ USER MANAGEMENT

3) Get All Users (Admin Only)
------------------------------
Method: GET
URL: http://localhost:3000/users
Headers: Authorization: Bearer ADMIN_JWT_TOKEN_HERE

Auth Required: Yes (Admin)

Advanced Query Examples:
Basic: http://localhost:3000/users
With pagination: http://localhost:3000/users?page=1&limit=10
Filter by role: http://localhost:3000/users?role=admin
Search users: http://localhost:3000/users?search=john
Full query: http://localhost:3000/users?page=1&limit=10&role=user&search=jojo&sortBy=created_at&sortOrder=DESC

Expected Response (200):
{
  "data": [
    {
      "user_id": 1,
      "username": "admin",
      "email": "admin@aniconnect.com",
      "role": "admin",
      "profile_pic": null,
      "bio": null,
      "created_at": "2025-01-15T..."
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 3,
    "totalPages": 1,
    "hasNext": false,
    "hasPrev": false
  },
  "filters": {
    "role": "user",
    "search": "jojo",
    "sortBy": "created_at",
    "sortOrder": "DESC"
  }
}
------------------------------------------------------------------------------------------------
4) Get User Profile
---------------------------------
Method: GET
URL: http://localhost:3000/users/1

Auth Required: Yes

Expected Response (200):
{
  "user_id": 1,
  "username": "admin",
  "email": "admin@aniconnect.com",
  "role": "admin",
  "profile_pic": null,
  "bio": null
}
------------------------------------------------------------------------------------------------
5) Update User Profile
----------------------
Method: PUT
URL: http://localhost:3000/users/1

Auth Required: Yes

Body (JSON):
{
  "username": "adminuser",
  "email": "newemail@example.com",
  "bio": "Updated bio information",
  "password": "newpassword123"
}

Expected Response (200):
{
  "message": "Profile 1 updated successfully"
}
------------------------------------------------------------------------------------------------
6) Delete User (Admin Only)
---------------------------
Method: DELETE
URL: http://localhost:3000/users/4
Headers: Authorization: Bearer ADMIN_JWT_TOKEN_HERE

Auth Required: Yes (Admin)

Expected Response (204): (No content)
------------------------------------------------------------------------------------------------
üé¨ ANIME MANAGEMENT

7)  List All Anime (Advanced Features)
----------------------------------------------
Method: GET
URL: http://localhost:3000/anime

Basic request:
http://localhost:3000/anime

Advanced Query Examples:
Genre filter:
http://localhost:3000/anime?genre=Action

Studio filter (partial match):
http://localhost:3000/anime?studio=David

Search:
http://localhost:3000/anime?search=JoJo

Pagination:
http://localhost:3000/anime?page=1&limit=5

Sorting:
http://localhost:3000/anime?sortBy=rating&sortOrder=DESC

Full advanced query:
http://localhost:3000/anime?page=1&limit=5&genre=Action&studio=David&sortBy=rating&sortOrder=DESC&search=JoJo

Expected Response (200):
{
  "data": [
    {
      "anime_id": 1,
      "title": "JoJo's Bizarre Adventure",
      "description": "The Joestar family's generational battle against evil",
      "genre": "Action, Supernatural",
      "episodes": 190,
      "release_date": "2012-10-05",
      "studio": "David Production",
      "rating": 8.8,
      "poster_url": null,
      "created_at": "2025-01-15T...",
      "updated_at": "2025-01-15T..."
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 5,
    "total": 3,
    "totalPages": 1,
    "hasNext": false,
    "hasPrev": false
  },
  "filters": {
    "genre": "Action",
    "studio": "David",
    "search": "JoJo",
    "sortBy": "rating",
    "sortOrder": "DESC"
  }
}
------------------------------------------------------------------------------------------------
8) Get Specific Anime
---------------------
Method: GET
URL: http://localhost:3000/anime/1

Expected Response (200):
{
  "anime_id": 1,
  "title": "JoJo's Bizarre Adventure",
  "description": "The Joestar family's generational battle against evil",
  "genre": "Action, Supernatural",
  "episodes": 190,
  "release_date": "2012-10-05T00:00:00.000Z",
  "studio": "David Production",
  "rating": 8.8,
  "poster_url": null,
  "created_at": "2025-01-15T...",
  "updated_at": "2025-01-15T..."
}
------------------------------------------------------------------------------------------------
9) Create New Anime (Admin Only)
--------------------------------
Method: POST
URL: http://localhost:3000/anime
Headers: 
  Content-Type: application/json
  Authorization: Bearer ADMIN_JWT_TOKEN_HERE

Body (JSON):
{
  "title": "Attack on Titan",
  "description": "Humanity fights against giant humanoid Titans",
  "genre": "Action, Drama",
  "episodes": 75,
  "studio": "MAPPA"
}

Expected Response (201):
{
  "anime_id": 4
}
------------------------------------------------------------------------------------------------
10) Update Anime (Admin Only)
----------------------------
Method: PUT
URL: http://localhost:3000/anime/4
Headers: 
  Content-Type: application/json
  Authorization: Bearer ADMIN_JWT_TOKEN_HERE

Body (JSON):
{
  "title": "Attack on Titan: Final Season",
  "description": "Updated description",
  "genre": "Action, Drama, Military",
  "episodes": 87,
  "studio": "MAPPA"
}

Expected Response (200):
{
  "message": "Anime updated successfully"
}
------------------------------------------------------------------------------------------------
11) Delete Anime (Admin Only)
-----------------------------
Method: DELETE
URL: http://localhost:3000/anime/4
Headers: 
  Authorization: Bearer ADMIN_JWT_TOKEN_HERE

Expected Response (204): (No content)
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
üí¨ FORUM SYSTEM

 12) Create Discussion Thread
 -----------------------------
 Method: POST
URL: http://localhost:3000/threads
Headers: 
  Content-Type: application/json
  Authorization: Bearer USER_JWT_TOKEN_HERE

Body (JSON):
{
  "anime_id": 1,
  "title": "Best JoJo Part Discussion",
  "content": "Which JoJo part is your favorite and why? Let's discuss!"
}

Expected Response (201):
{
  "thread_id": 3
}
------------------------------------------------------------------------------------------------
13)  Get Threads for Anime
--------------------------
Method: GET
URL: http://localhost:3000/threads/1

Advanced Query Examples:
Basic: http://localhost:3000/threads/1
With pagination: http://localhost:3000/threads/1?page=1&limit=10
With sorting: http://localhost:3000/threads/1?sortBy=created_at&sortOrder=DESC
Full query: http://localhost:3000/threads/1?page=1&limit=10&sortBy=created_at&sortOrder=DESC

Expected Response (200):
{
  "data": [
    {
      "thread_id": 1,
      "anime_id": 1,
      "user_id": 2,
      "title": "Best JoJo Stand?",
      "content": "Which Stand ability is most overpowered?",
      "created_at": "2025-01-15T...",
      "updated_at": "2025-01-15T...",
      "view_count": 0,
      "is_pinned": false,
      "is_locked": false,
      "username": "jojofan"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 1,
    "totalPages": 1
  }
}
------------------------------------------------------------------------------------------------
14) Update Thread
-----------------
Method: PUT
URL: http://localhost:3000/threads/1
Headers: 
  Content-Type: application/json
  Authorization: Bearer USER_JWT_TOKEN_HERE

Body (JSON):
{
  "title": "Updated: Best JoJo Stand Discussion",
  "content": "Updated content for the thread"
}

Expected Response (200):
{
  "message": "Thread updated successfully"
}
------------------------------------------------------------------------------------------------
15) Delete Thread (Admin Only)
------------------------------

Method: DELETE
URL: http://localhost:3000/threads/1
Headers: 
  Authorization: Bearer ADMIN_JWT_TOKEN_HERE

Expected Response (204): (No content)

------------------------------------------------------------------------------------------------
16) Add Comment to Thread
-------------------------
Method: POST
URL: http://localhost:3000/comments
Headers: 
  Content-Type: application/json
  Authorization: Bearer USER_JWT_TOKEN_HERE

Regular Comment Body (JSON):
{
  "thread_id": 1,
  "content": "I think Star Platinum is the strongest stand!",
  "parent_comment_id": null
}

Nested Reply Body (JSON):
{
  "thread_id": 1,
  "content": "But what about The World?",
  "parent_comment_id": 1
}

Expected Response (201):
{
  "comment_id": 4
}

------------------------------------------------------------------------------------------------
17) Get Thread Comments
-----------------------
Method: GET
URL: http://localhost:3000/comments/1

Expected Response (200):
[
  {
    "comment_id": 1,
    "thread_id": 1,
    "user_id": 3,
    "parent_comment_id": null,
    "content": "Star Platinum is clearly the best!",
    "created_at": "2025-01-15T...",
    "updated_at": "2025-01-15T...",
    "upvotes": 0,
    "downvotes": 0,
    "username": "bleachlover"
  }
]

------------------------------------------------------------------------------------------------
18) Upvote Comment
------------------
Method: PUT
URL: http://localhost:3000/comments/1/upvote
Headers: 
  Authorization: Bearer USER_JWT_TOKEN_HERE

Expected Response (200):
{
  "message": "Comment upvoted"
}
------------------------------------------------------------------------------------------------
19) Delete Comment
------------------
Method: DELETE
URL: http://localhost:3000/comments/1
Headers: 
  Authorization: Bearer USER_JWT_TOKEN_HERE

Expected Response (204): (No content)
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
üìù WATCHLIST MANAGEMENT

20) Add Anime to Watchlist
--------------------------
Method: POST
URL: http://localhost:3000/watchlist
Headers: 
  Content-Type: application/json
  Authorization: Bearer USER_JWT_TOKEN_HERE

Body (JSON):
{
  "anime_id": 2,
  "status": "plan-to-watch"
}

Status options: "watching", "completed", "on-hold", "dropped", "plan-to-watch"

Expected Response (201):
{
  "message": "Added to watchlist"
}
------------------------------------------------------------------------------------------------
21) Get User's Watchlist
------------------------
Method: GET
URL: http://localhost:3000/watchlist/2 (using user_id)
Headers: 
  Authorization: Bearer USER_JWT_TOKEN_HERE

Advanced Query Examples:
Basic: http://localhost:3000/watchlist/2
With pagination: http://localhost:3000/watchlist/2?page=1&limit=10
Filter by status: http://localhost:3000/watchlist/2?status=completed
With sorting: http://localhost:3000/watchlist/2?sortBy=title&sortOrder=ASC
Full query: http://localhost:3000/watchlist/2?page=1&limit=10&status=completed&sortBy=title&sortOrder=ASC

Expected Response (200):
{
  "data": [
    {
      "anime_id": 1,
      "title": "JoJo's Bizarre Adventure",
      "description": "The Joestar family's generational battle against evil",
      "genre": "Action, Supernatural",
      "episodes": 190,
      "release_date": "2012-10-05T00:00:00.000Z",
      "studio": "David Production",
      "rating": 8.8,
      "poster_url": null,
      "status": "completed",
      "rating": 5,
      "progress": 190,
      "notes": null,
      "watchlist_updated": "2025-01-15T..."
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 1,
    "totalPages": 1
  }
}
------------------------------------------------------------------------------------------------
22) Update Watchlist Entry
--------------------------
Method: PUT
URL: http://localhost:3000/watchlist/2
Headers: 
  Content-Type: application/json
  Authorization: Bearer USER_JWT_TOKEN_HERE

Body (JSON):
{
  "status": "completed",
  "rating": 4,
  "progress": 366,
  "notes": "Great anime, loved the Soul Society arc!"
}

Expected Response (200):
{
  "message": "Watchlist entry updated successfully"
}
------------------------------------------------------------------------------------------------
23)  Remove from Watchlist
--------------------------
Method: DELETE
URL: http://localhost:3000/watchlist/2
Headers: 
  Authorization: Bearer USER_JWT_TOKEN_HERE

Expected Response (204): (No content)
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
üß™ TESTING CREDENTIALS

Test Users (from database seed data):
====================================

Admin User:
- Username: "admin"
- Password: "admin123"
- Role: "admin"
- ID: 1

Regular User 1:
- Username: "jojofan"
- Password: "jojo123"
- Role: "user"
- ID: 2

Regular User 2:
- Username: "bleachlover"
- Password: "bleach123"
- Role: "user"
- ID: 3

Sample Anime Data:
=================
- ID 1: JoJo's Bizarre Adventure (Action, Supernatural) - David Production
- ID 2: Bleach (Action, Supernatural) - Pierrot
- ID 3: Naruto (Action, Adventure) - Pierrot

Sample Thread Data:
==================
- Thread ID 1: "Best JoJo Stand?" (for Anime ID 1)
- Thread ID 2: "Bleach Arcs Ranking" (for Anime ID 2)

Sample Comment Data:
===================
- Comment ID 1: "Star Platinum is clearly the best!" (Thread 1)
- Comment ID 2: "But Golden Experience Requiem can literally undo reality" (Thread 1)
- Comment ID 3: "The Soul Society arc is peak Bleach" (Thread 2)

------------------------------------------------------------------------------------------------
üîß TESTING WORKFLOW

Step-by-Step Testing Process:
============================

1. AUTHENTICATION SETUP
   - Test user registration (POST /register)
   - Test user login (POST /login)
   - Copy JWT token for subsequent requests

2. USER MANAGEMENT (Admin Features)
   - Login as admin
   - Get all users (GET /users)
   - Update user profile (PUT /users/:id)
   - Delete user (DELETE /users/:id)

3. ANIME CRUD OPERATIONS
   - View all anime (GET /anime)
   - View specific anime (GET /anime/:id)
   - Create new anime as admin (POST /anime)
   - Update anime as admin (PUT /anime/:id)
   - Delete anime as admin (DELETE /anime/:id)

4. ADVANCED ANIME FEATURES
   - Test filtering by genre
   - Test filtering by studio
   - Test search functionality
   - Test pagination
   - Test sorting options

5. FORUM SYSTEM
   - Create discussion thread (POST /threads)
   - View threads for anime (GET /threads/:anime_id)
   - Update thread (PUT /threads/:id)
   - Add comments (POST /comments)
   - View comments (GET /comments/:thread_id)
   - Upvote comments (PUT /comments/:id/upvote)
   - Delete comments/threads

6. WATCHLIST MANAGEMENT
   - Add anime to watchlist (POST /watchlist)
   - View personal watchlist (GET /watchlist/:user_id)
   - Update watchlist entry (PUT /watchlist/:anime_id)
   - Remove from watchlist (DELETE /watchlist/:anime_id)

7. SECURITY TESTING
   - Try accessing admin routes with user token (should get 403)
   - Try accessing protected routes without token (should get 401)
   - Try accessing other users' data

8. ERROR HANDLING TESTING
   - Use invalid IDs (should get 404)
   - Send malformed JSON (should get 400)
   - Send missing required fields

------------------------------------------------------------------------------------------------
üìä EXPECTED HTTP STATUS CODES

Success Responses:
- 200 OK - Successful GET, PUT operations
- 201 Created - Successful POST operations (create)
- 204 No Content - Successful DELETE operations

Error Responses:
- 400 Bad Request - Malformed request, validation errors
- 401 Unauthorized - Missing or invalid JWT token
- 403 Forbidden - Valid token but insufficient permissions
- 404 Not Found - Resource doesn't exist
- 409 Conflict - Duplicate data (username/email exists)
- 500 Internal Server Error - Server-side errors

------------------------------------------------------------------------------------------------
üöÄ ADVANCED TESTING FEATURES

Query Parameters Available:
==========================

Pagination (All list endpoints):
- page=1 (default: 1)
- limit=10 (default: 10)

Sorting (All list endpoints):
- sortBy=field_name
- sortOrder=ASC|DESC (default: ASC for most, DESC for dates)

Filtering:
- Anime: genre=Action, studio=MAPPA, search=JoJo
- Users: role=admin, search=username
- Watchlist: status=completed
- Threads: sortBy=created_at|title|view_count

Search Functionality:
- Anime: Searches title and description
- Users: Searches username and email
- Case-insensitive partial matching

------------------------------------------------------------------------------------------------
üí° TESTING TIPS

1. Always login first to get JWT token
2. Use proper Content-Type headers for JSON requests
3. Include Authorization header for protected routes
4. Test both success and error scenarios
5. Check response structure matches expected format
6. Verify pagination metadata is correct
7. Test filtering and sorting combinations
8. Ensure security rules are properly enforced
9. Test cascading deletes (anime deletion removes threads/comments)
10. Verify foreign key constraints work properly

------------------------------------------------------------------------------------------------
üéØ DEMO SUGGESTIONS

For Video/Presentation Demo:
===========================

1. Show database schema and relationships
2. Demonstrate user registration and authentication
3. Show admin vs user permission differences
4. Create, read, update, delete anime (full CRUD)
5. Demonstrate advanced features (filtering, search, pagination)
6. Show forum system with nested comments
7. Demonstrate watchlist management
8. Show error handling and security
9. Run automated test suite
10. Highlight code architecture and best practices

This comprehensive API demonstrates:
- Professional backend development skills
- Security best practices
- Advanced database operations
- RESTful API design principles
- Comprehensive testing methodology
- Enterprise-level features and error handling